library(dplyr)
library(knitr)
library(ggplot2)
# Download the file
if (!file.exists("./repdata-data-StormData.csv.bz2")) {
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
"./repdata-data-StormData.csv.bz2")
}
# unzip file
if (!file.exists("./repdata-data-StormData.csv")) {
bunzip2("./repdata-data-StormData.csv.bz2", "./repdata-data-StormData.csv", remove = FALSE)
}
# load data into R
Data <- read.csv("./repdata-data-StormData.csv", header = TRUE)
summary(Data)
str(Data)
head(Data)
tail(Data)
requiredColumns <- c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
stormData <- Data[requiredColumns]
stormData$year <- as.numeric(format(as.Date(stormData$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
hist(stormData$year, breaks = 30)
View(stormData)
reducedData <- stormData[stormData$year >= 1990, ]
unique(reducedData$PROPDMGEXP)
knitr::opts_chunk$set(echo = TRUE)
library(R.utils)
library(dplyr)
library(knitr)
library(ggplot2)
# Download the file
if (!file.exists("./repdata-data-StormData.csv.bz2")) {
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
"./repdata-data-StormData.csv.bz2")
}
# unzip file
if (!file.exists("./repdata-data-StormData.csv")) {
bunzip2("./repdata-data-StormData.csv.bz2", "./repdata-data-StormData.csv", remove = FALSE)
}
# load data into R
Data <- read.csv("./repdata-data-StormData.csv", header = TRUE)
summary(Data)
str(Data)
head(Data)
tail(Data)
requiredColumns <- c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
stormData <- Data[requiredColumns]
stormData$year <- as.numeric(format(as.Date(stormData$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
hist(stormData$year, breaks = 30)
reducedData <- stormData[stormData$year >= 1990, ]
unique(reducedData$PROPDMGEXP)
# prepping the property data for the calculation
reducedData$PROPEXP[reducedData$PROPDMGEXP == "K"] <- 1000
reducedData$PROPEXP[reducedData$PROPDMGEXP == "M"] <- 1e+06
reducedData$PROPEXP[reducedData$PROPDMGEXP == ""] <- 1
reducedData$PROPEXP[reducedData$PROPDMGEXP == "B"] <- 1e+09
reducedData$PROPEXP[reducedData$PROPDMGEXP == "m"] <- 1e+06
reducedData$PROPEXP[reducedData$PROPDMGEXP == "0"] <- 1
reducedData$PROPEXP[reducedData$PROPDMGEXP == "5"] <- 1e+05
reducedData$PROPEXP[reducedData$PROPDMGEXP == "6"] <- 1e+06
reducedData$PROPEXP[reducedData$PROPDMGEXP == "4"] <- 10000
reducedData$PROPEXP[reducedData$PROPDMGEXP == "2"] <- 100
reducedData$PROPEXP[reducedData$PROPDMGEXP == "3"] <- 1000
reducedData$PROPEXP[reducedData$PROPDMGEXP == "h"] <- 100
reducedData$PROPEXP[reducedData$PROPDMGEXP == "7"] <- 1e+07
reducedData$PROPEXP[reducedData$PROPDMGEXP == "H"] <- 100
reducedData$PROPEXP[reducedData$PROPDMGEXP == "1"] <- 10
reducedData$PROPEXP[reducedData$PROPDMGEXP == "8"] <- 1e+08
# assigning 0 to invalid exponent data
reducedData$PROPEXP[reducedData$PROPDMGEXP == "+"] <- 0
reducedData$PROPEXP[reducedData$PROPDMGEXP == "-"] <- 0
reducedData$PROPEXP[reducedData$PROPDMGEXP == "?"] <- 0
# now compute the property damage value
reducedData$PROPDMGVAL <- reducedData$PROPDMG * reducedData$PROPEXP
unique(reducedData$CROPDMGEXP)
# prepping the property data for the calculation
reducedData$CROPEXP[reducedData$CROPDMGEXP == "M"] <- 1e+06
reducedData$CROPEXP[reducedData$CROPDMGEXP == "K"] <- 1000
reducedData$CROPEXP[reducedData$CROPDMGEXP == "m"] <- 1e+06
reducedData$CROPEXP[reducedData$CROPDMGEXP == "B"] <- 1e+09
reducedData$CROPEXP[reducedData$CROPDMGEXP == "0"] <- 1
reducedData$CROPEXP[reducedData$CROPDMGEXP == "k"] <- 1000
reducedData$CROPEXP[reducedData$CROPDMGEXP == "2"] <- 100
reducedData$CROPEXP[reducedData$CROPDMGEXP == ""] <- 1
# assignig 0 to invalid exponent data
reducedData$CROPEXP[reducedData$CROPDMGEXP == "?"] <- 0
# now compute the crop damage value
reducedData$CROPDMGVAL <- reducedData$CROPDMG * reducedData$CROPEXP
#now compute the aggregate values of the Injuries, Fatalities, Property damage and Crop damages
totalInjuries <- reducedData %>% aggregate(INJURIES ~ EVTYPE, FUN = sum) %>% order(INJURIES, decreasing=TRUE)
View(reducedData)
View(reducedData)
View(reducedData)
reducedData$EVTYPE = as.character(reducedData$EVTYPE)
knitr::opts_chunk$set(echo = TRUE)
library(R.utils)
library(dplyr)
library(knitr)
library(ggplot2)
# setting the constants
lambda <- 0.2
n <- 40
numberOfSimulations <- 1000
# setting the seed
set.seed(123456)
# run the test simulations matrix
exponentialDistributions <- matrix(data=rexp(n * numberOfSimulations, lambda), nrow=numberOfSimulations)
exponentialDistributionMeans <- data.frame(means=apply(exponentialDistributions, 1, mean))
# plotting
ggplot(data = exponentialDistributionMeans, aes(x = means)) +
geom_histogram(binwidth=0.1) +
scale_x_continuous(breaks=round(seq(min(exponentialDistributionMeans$means), max(exponentialDistributionMeans$means), by=1)))
mu <- 1/lambda
mu
meanOfMeans <- mean(exponentialDistributionMeans$means)
meanOfMeans
knitr::opts_chunk$set(echo = TRUE)
library(R.utils)
library(dplyr)
library(knitr)
library(ggplot2)
# setting the constants
lambda <- 0.2
n <- 40
numberOfSimulations <- 1000
# setting the seed
set.seed(123456)
# run the test simulations matrix
exponentialDistributions <- matrix(data=rexp(n * numberOfSimulations, lambda), nrow=numberOfSimulations)
exponentialDistributionMeans <- data.frame(means=apply(exponentialDistributions, 1, mean))
# plotting
ggplot(data = exponentialDistributionMeans, aes(x = means)) +
geom_histogram(binwidth=0.1) +
scale_x_continuous(breaks=round(seq(min(exponentialDistributionMeans$means), max(exponentialDistributionMeans$means), by=1)))
mu <- 1/lambda
mu
meanOfMeans <- mean(exponentialDistributionMeans$means)
meanOfMeans
knitr::opts_chunk$set(echo = TRUE)
library(R.utils)
library(dplyr)
library(knitr)
library(ggplot2)
# setting the constants
lambda <- 0.2
n <- 40
numberOfSimulations <- 1000
# setting the seed
set.seed(123456)
# run the test simulations matrix
exponentialDistributions <- matrix(data=rexp(n * numberOfSimulations, lambda), nrow=numberOfSimulations)
exponentialDistributionMeans <- data.frame(means=apply(exponentialDistributions, 1, mean))
# plotting
ggplot(data = exponentialDistributionMeans, aes(x = means)) +
geom_histogram(binwidth=0.1) +
scale_x_continuous(breaks=round(seq(min(exponentialDistributionMeans$means), max(exponentialDistributionMeans$means), by=1)))
mu <- 1/lambda
mu
meanOfMeans <- mean(exponentialDistributionMeans$means)
meanOfMeans
unlink('GitHub/Statistical Inference/Simulation Exercise_cache', recursive = TRUE)
devtools::install_github("rstudio/rmarkdown")
devtools::install_github("rstudio/rmarkdown")
devtools::install_github("rstudio/rmarkdown")
install.packages("leaflet")
install.packages("plotly")
mpg
library(datasets)
mpg
data(mpg)
library(ggplot2)
data(mpg)
mpg
mpg
install.packages("caret")
install.packages("rpart")
install.packages("rattle")
install.packages("corrplot")
install.packages("RGtk2", depen=T, type="source")
library(RGtk2)
library(RGtk2)
install.packages('e1071', dependencies=TRUE)
TestingData$classe
TestingData <- read.csv("./pml-testing.csv", header = TRUE)
TestingData$classe
TestingData
class(TestingData)
install.packages("shiny")
library(ggplot2)
dataset(mpg)
data("mpg")
str(mpg)
table(mpg)
class(mpg)
head(mpg)
data("mtcars")
str(mtcars)
data("LifeCycleSavings")
summary(LifeCycleSavings)
str(LifeCycleSavings)
data("ChickWeight")
str(ChickWeight)
data("chickwts")
str(chickwts)
summary(ChickWeight)
ChickWeight
shiny::runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
install.packages("shiny")
install.packages("shiny")
shiny::runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
shiny::runApp('ChickWeight')
data("ChickWeight")
str(ChickWeight)
runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
runApp('ChickWeight')
library(devtools)
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
author("DDP Reproducible Pitch")
slidify('index.Rmd')
# Chunk 1
sidebarLayout(
sidebarPanel(
sliderInput("days",
"Number of Days:",
min = 1,
max = 21,
value = 10),
sliderInput("diet",
"Type of Diet:",
min = 1,
max = 4,
value = 1)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("ChkWtPlot"),
h3("Predicted Chick Weight is:"),
textOutput("ChickWt")
# Chunk 2
data(ChickWeight)
trainedModel <- lm(weight~Time, data=ChickWeight)
predictWt <- reactive({
myEntry <- data.frame(Time = input$days, Diet = input$diet)
prediction <- predict(trainedModel, newdata = myEntry)
return(prediction)
})
output$ChkWtPlot <- renderPlot({
plot(ChickWeight$weight, ChickWeight$Time, xlab = "No. of Days", ylab = "Chick Weight", pch = 16, xlim = c(1, 21), ylim = c(10, 400))
abline(trainedModel, col = "blue", lwd = 2)
points(input$days, predictWt(), col = "red", pch = 16, cex = 2)
})
output$ChickWt <- renderText({
predictWt()
})
# Chunk 1
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Predict Chick Weight based on the type of weight and Number of days"),
# Sidebar with a slider input for number of days and diet
sidebarLayout(
sidebarPanel(
sliderInput("days",
"Number of Days:",
min = 1,
max = 21,
value = 10),
sliderInput("diet",
"Type of Diet:",
min = 1,
max = 4,
value = 1)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("ChkWtPlot"),
h3("Predicted Chick Weight is:"),
textOutput("ChickWt")
)
)
))
# Chunk 2
library(shiny)
library(caret)
library(lattice)
shinyServer(function(input, output) {
data(ChickWeight)
trainedModel <- lm(weight~Time, data=ChickWeight)
predictWt <- reactive({
myEntry <- data.frame(Time = input$days, Diet = input$diet)
prediction <- predict(trainedModel, newdata = myEntry)
return(prediction)
})
output$ChkWtPlot <- renderPlot({
plot(ChickWeight$weight, ChickWeight$Time, xlab = "No. of Days", ylab = "Chick Weight", pch = 16, xlim = c(1, 21), ylim = c(10, 400))
abline(trainedModel, col = "blue", lwd = 2)
points(input$days, predictWt(), col = "red", pch = 16, cex = 2)
})
output$ChickWt <- renderText({
predictWt()
})
})
slidify('index.Rmd')
getwd()
# Chunk 1
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Predict Chick Weight based on the type of weight and Number of days"),
# Sidebar with a slider input for number of days and diet
sidebarLayout(
sidebarPanel(
sliderInput("days",
"Number of Days:",
min = 1,
max = 21,
value = 10),
sliderInput("diet",
"Type of Diet:",
min = 1,
max = 4,
value = 1)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("ChkWtPlot"),
h3("Predicted Chick Weight is:"),
textOutput("ChickWt")
)
)
))
# Chunk 2
library(shiny)
library(caret)
library(lattice)
shinyServer(function(input, output) {
data(ChickWeight)
trainedModel <- lm(weight~Time, data=ChickWeight)
predictWt <- reactive({
myEntry <- data.frame(Time = input$days, Diet = input$diet)
prediction <- predict(trainedModel, newdata = myEntry)
return(prediction)
})
output$ChkWtPlot <- renderPlot({
plot(ChickWeight$weight, ChickWeight$Time, xlab = "No. of Days", ylab = "Chick Weight", pch = 16, xlim = c(1, 21), ylim = c(10, 400))
abline(trainedModel, col = "blue", lwd = 2)
points(input$days, predictWt(), col = "red", pch = 16, cex = 2)
})
output$ChickWt <- renderText({
predictWt()
})
})
slidify('index.Rmd')
unlink('index_cache', recursive = TRUE)
rmarkdown::shiny_prerendered_clean('index.Rmd')
# Chunk 1
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Predict Chick Weight based on the type of weight and Number of days"),
# Sidebar with a slider input for number of days and diet
sidebarLayout(
sidebarPanel(
sliderInput("days",
"Number of Days:",
min = 1,
max = 21,
value = 10),
sliderInput("diet",
"Type of Diet:",
min = 1,
max = 4,
value = 1)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("ChkWtPlot"),
h3("Predicted Chick Weight is:"),
textOutput("ChickWt")
)
)
))
# Chunk 2
library(shiny)
library(caret)
library(lattice)
shinyServer(function(input, output) {
data(ChickWeight)
trainedModel <- lm(weight~Time, data=ChickWeight)
predictWt <- reactive({
myEntry <- data.frame(Time = input$days, Diet = input$diet)
prediction <- predict(trainedModel, newdata = myEntry)
return(prediction)
})
output$ChkWtPlot <- renderPlot({
plot(ChickWeight$weight, ChickWeight$Time, xlab = "No. of Days", ylab = "Chick Weight", pch = 16, xlim = c(1, 21), ylim = c(10, 400))
abline(trainedModel, col = "blue", lwd = 2)
points(input$days, predictWt(), col = "red", pch = 16, cex = 2)
})
output$ChickWt <- renderText({
predictWt()
})
})
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
# Chunk 1
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Predict Chick Weight based on the type of weight and Number of days"),
# Sidebar with a slider input for number of days and diet
sidebarLayout(
sidebarPanel(
sliderInput("days",
"Number of Days:",
min = 1,
max = 21,
value = 10),
sliderInput("diet",
"Type of Diet:",
min = 1,
max = 4,
value = 1)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("ChkWtPlot"),
h3("Predicted Chick Weight is:"),
textOutput("ChickWt")
)
)
))
# Chunk 2
library(shiny)
library(caret)
library(lattice)
shinyServer(function(input, output) {
data(ChickWeight)
trainedModel <- lm(weight~Time, data=ChickWeight)
predictWt <- reactive({
myEntry <- data.frame(Time = input$days, Diet = input$diet)
prediction <- predict(trainedModel, newdata = myEntry)
return(prediction)
})
output$ChkWtPlot <- renderPlot({
plot(ChickWeight$weight, ChickWeight$Time, xlab = "No. of Days", ylab = "Chick Weight", pch = 16, xlim = c(1, 21), ylim = c(10, 400))
abline(trainedModel, col = "blue", lwd = 2)
points(input$days, predictWt(), col = "red", pch = 16, cex = 2)
})
output$ChickWt <- renderText({
predictWt()
})
})
slidify('index.Rmd')
unlink('index_cache', recursive = TRUE)
rmarkdown::shiny_prerendered_clean('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='vijaygurram', token='729BF882F0F40E0E492AD65A15BB8A4F', secret='TLgYuzR8zHSfQjCZiV4MMqHuV7wXDVNy9XKaETkG')
library(rsconnect)
shiny::runApp('~/ChickWeight')
slidify('index.Rmd')
library(slidify)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
author("Chick Weight")
slidify('index.Rmd')
getwd()
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(rsconnect)
rsconnect::deployApp('C:/Users/Vijay/Documents/DDP Reproducible Pitch/Chick Weight/', appFiles = 'index.html')
rsconnect::deployApp(getwd(), appFiles = 'index.html')
rsconnect::deployApp(getwd(), appFiles = 'index.html')
rsconnect::deployApp(getwd())
